// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/note.proto

/*
Package note is a generated protocol buffer package.

It is generated from these files:
	proto/note.proto

It has these top-level messages:
	Note
	NoteReq
	NoteFindReq
*/
package note

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Note struct {
	Id        int32                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Title     string                     `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Completed string                     `protobuf:"bytes,3,opt,name=completed" json:"completed,omitempty"`
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *Note) Reset()                    { *m = Note{} }
func (m *Note) String() string            { return proto.CompactTextString(m) }
func (*Note) ProtoMessage()               {}
func (*Note) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Note) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Note) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Note) GetCompleted() string {
	if m != nil {
		return m.Completed
	}
	return ""
}

func (m *Note) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Note) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type NoteReq struct {
	Title     string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Completed bool   `protobuf:"varint,2,opt,name=completed" json:"completed,omitempty"`
}

func (m *NoteReq) Reset()                    { *m = NoteReq{} }
func (m *NoteReq) String() string            { return proto.CompactTextString(m) }
func (*NoteReq) ProtoMessage()               {}
func (*NoteReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NoteReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *NoteReq) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

type NoteFindReq struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *NoteFindReq) Reset()                    { *m = NoteFindReq{} }
func (m *NoteFindReq) String() string            { return proto.CompactTextString(m) }
func (*NoteFindReq) ProtoMessage()               {}
func (*NoteFindReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *NoteFindReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*Note)(nil), "note.Note")
	proto.RegisterType((*NoteReq)(nil), "note.NoteReq")
	proto.RegisterType((*NoteFindReq)(nil), "note.NoteFindReq")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NoteService service

type NoteServiceClient interface {
	Create(ctx context.Context, in *NoteReq, opts ...grpc.CallOption) (*Note, error)
	Find(ctx context.Context, in *NoteFindReq, opts ...grpc.CallOption) (*Note, error)
}

type noteServiceClient struct {
	cc *grpc.ClientConn
}

func NewNoteServiceClient(cc *grpc.ClientConn) NoteServiceClient {
	return &noteServiceClient{cc}
}

func (c *noteServiceClient) Create(ctx context.Context, in *NoteReq, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := grpc.Invoke(ctx, "/note.NoteService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteServiceClient) Find(ctx context.Context, in *NoteFindReq, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := grpc.Invoke(ctx, "/note.NoteService/Find", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NoteService service

type NoteServiceServer interface {
	Create(context.Context, *NoteReq) (*Note, error)
	Find(context.Context, *NoteFindReq) (*Note, error)
}

func RegisterNoteServiceServer(s *grpc.Server, srv NoteServiceServer) {
	s.RegisterService(&_NoteService_serviceDesc, srv)
}

func _NoteService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.NoteService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServiceServer).Create(ctx, req.(*NoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteFindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.NoteService/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServiceServer).Find(ctx, req.(*NoteFindReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _NoteService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "note.NoteService",
	HandlerType: (*NoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _NoteService_Create_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _NoteService_Find_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/note.proto",
}

func init() { proto.RegisterFile("proto/note.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xbf, 0x4a, 0xc4, 0x40,
	0x10, 0xc6, 0xdd, 0x98, 0x9c, 0x66, 0x0e, 0x45, 0x07, 0x8b, 0x10, 0x14, 0x43, 0x40, 0x4c, 0xb5,
	0x81, 0xb3, 0xb2, 0xb0, 0x38, 0x04, 0x4b, 0x8b, 0x68, 0x2b, 0x92, 0xcb, 0x8e, 0xc7, 0x42, 0x72,
	0x1b, 0xe3, 0x9c, 0xcf, 0xe7, 0xa3, 0xc9, 0x6e, 0x12, 0xa2, 0x82, 0x5c, 0x37, 0x7f, 0xbe, 0x6f,
	0xe6, 0x37, 0x03, 0x27, 0x6d, 0x67, 0xd8, 0xe4, 0x1b, 0xc3, 0x24, 0x5d, 0x88, 0xbe, 0x8d, 0xe3,
	0xcb, 0xb5, 0x31, 0xeb, 0x9a, 0x72, 0x57, 0x5b, 0x6d, 0xdf, 0x72, 0xd6, 0x0d, 0x7d, 0x70, 0xd9,
	0xb4, 0xbd, 0x2c, 0xfd, 0x12, 0xe0, 0x3f, 0x1a, 0x26, 0x3c, 0x06, 0x4f, 0xab, 0x48, 0x24, 0x22,
	0x0b, 0x0a, 0x4f, 0x2b, 0x3c, 0x83, 0x80, 0x35, 0xd7, 0x14, 0x79, 0x89, 0xc8, 0xc2, 0xa2, 0x4f,
	0xf0, 0x1c, 0xc2, 0xca, 0x34, 0x6d, 0x4d, 0x4c, 0x2a, 0xda, 0x77, 0x9d, 0xa9, 0x80, 0xb7, 0x00,
	0x55, 0x47, 0x25, 0x93, 0x7a, 0x2d, 0x39, 0xf2, 0x13, 0x91, 0xcd, 0x17, 0xb1, 0xec, 0x11, 0xe4,
	0x88, 0x20, 0x9f, 0x47, 0x84, 0x22, 0x1c, 0xd4, 0x4b, 0xb6, 0xd6, 0x6d, 0xab, 0x46, 0x6b, 0xb0,
	0xdb, 0x3a, 0xa8, 0x97, 0x9c, 0xde, 0xc1, 0x81, 0xbd, 0xa0, 0xa0, 0xf7, 0x09, 0x5a, 0xfc, 0x0b,
	0x6d, 0xcf, 0x39, 0xfc, 0x01, 0x9d, 0x5e, 0xc0, 0xdc, 0xda, 0x1f, 0xf4, 0x46, 0xd9, 0x11, 0x7f,
	0xfe, 0xb0, 0x78, 0xe9, 0xdb, 0x4f, 0xd4, 0x7d, 0xea, 0x8a, 0xf0, 0x0a, 0x66, 0xf7, 0x0e, 0x1a,
	0x8f, 0xa4, 0xfb, 0xf6, 0xb0, 0x3a, 0x86, 0x29, 0x4d, 0xf7, 0xf0, 0x1a, 0x7c, 0x3b, 0x10, 0x4f,
	0xa7, 0xea, 0xb0, 0xe0, 0xb7, 0x70, 0x35, 0x73, 0xb7, 0xdd, 0x7c, 0x07, 0x00, 0x00, 0xff, 0xff,
	0x36, 0xc7, 0x09, 0xf8, 0xc1, 0x01, 0x00, 0x00,
}
